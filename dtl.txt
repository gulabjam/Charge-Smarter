import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'firebase_options.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_mapbox_navigation/flutter_mapbox_navigation.dart';


void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: const Color.fromARGB(255, 58, 200, 67)),
        useMaterial3: true,
      ),
      home: const HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        image: DecorationImage(image: AssetImage("evcharging.jpg"),
        fit: BoxFit.cover
        ),
      ),
      child : Center(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: <Widget>[
            SizedBox(height: 50),
            Text(
              'CHARGE SMARTER!',
              style: TextStyle(
                fontSize: 70,
                color: Colors.white,
                fontWeight: FontWeight.bold,
                decoration: TextDecoration.none,
              ),
              textAlign: TextAlign.center
            ),
            SizedBox(height: 150),
            Text(
              "Find your nearest charging station",
              style: TextStyle(
                fontSize: 30,
                color: Colors.white,
                fontWeight: FontWeight.bold,
                decoration: TextDecoration.none
              ),
              textAlign: TextAlign.center
            ),
            SizedBox(height: 120),
            TextButton(
            onPressed: () {
              Navigator.push(context,
                MaterialPageRoute(builder: (context) => const FlutterMap()));
            },
            style: TextButton.styleFrom(
            backgroundColor: Colors.transparent,
            padding: const EdgeInsets.symmetric(horizontal: 75, vertical: 25),
            textStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8), // Rounded corners
              side: const BorderSide(
                color: Colors.white, // Border color
                width: 2.0, // Border width
              ),
            ),
            ).copyWith(
            // Define button appearance for different states
            overlayColor: MaterialStateProperty.all(const Color.fromARGB(255, 91, 89, 89)), // Pressed state
            shadowColor: MaterialStateProperty.all(Colors.black.withOpacity(0.5)), // Hover state
            ),
            child: const Text('Go To Map', style: TextStyle(color: Colors.white, fontSize: 20),),
            ),
            SizedBox(height : 35),
            Text('Do not have an account yet?',
              style: TextStyle(color: Colors.blue, fontSize: 20, decoration: TextDecoration.none),
            ),
            SizedBox(height : 20),
            TextButton(onPressed: (){
                Navigator.push(context,
                MaterialPageRoute(builder: (context) => const Register()));
              },
              child: Text('Register', style: TextStyle(color: Colors.blue, fontSize: 20, decoration: TextDecoration.underline, // Underline the text
              decorationColor: Colors.blue,)))
          ],
        ),
      ),
    );
  }
}

class Register extends StatefulWidget {
  const Register({super.key});

  @override
  State<Register> createState() => _RegisterState();
}

class _RegisterState extends State<Register> {
  late final TextEditingController email;
  late final TextEditingController pwd;
  @override
  void initState() {
    email = TextEditingController();
    pwd = TextEditingController();
    super.initState();
  }
  @override
  void dispose() {
    email.dispose();
    pwd.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Register'),
      backgroundColor: Colors.blue,
      foregroundColor: Colors.white,),
      body : Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children :[
            SizedBox(height: 20,),
            TextField(
              controller: email,
              autocorrect: false,
              keyboardType: TextInputType.emailAddress,
              decoration: InputDecoration(
                hintText: 'Enter your E-mail here',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: BorderSide(color: Colors.blue, width : 10)
                ),
              ),
            ),
            SizedBox(height: 20,),
            TextField(
              controller: pwd,
              obscureText: true,
              autocorrect: false,
              enableSuggestions: false,
              decoration: InputDecoration(
                hintText: 'Enter your password here',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: BorderSide(color: Colors.blue, width : 10)
                ),
              ),
            ),
            TextButton(onPressed: () async {
              await Firebase.initializeApp(
              options: DefaultFirebaseOptions.currentPlatform,
              );
              final _email = email.text;
              final _password = pwd.text;
              final usercredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(email: _email, password: _password);
              print (usercredential);
            }, 
            child : Text('Register', style: TextStyle(color: Colors.blue, fontSize: 20),),
          ),
        ],
      ),
    );
  }
}

class FlutterMap extends StatefulWidget {
  const FlutterMap({super.key});

  @override
  State<FlutterMap> createState() => _FlutterMapState();
}

class _FlutterMapState extends State<FlutterMap> {
  MapBoxNavigationViewController? _controller;
  String? _instruction;
  bool _isMultipleStop = false;
  double? _distanceRemaining, _durationRemaining;
  bool _routeBuilt = false;
  bool _isNavigating = false;
  bool _arrived = false;
  late MapBoxOptions _navigationOption;

   Future<void> initialize() async {
    if (!mounted) return;
    _navigationOption = MapBoxNavigation.instance.getDefaultOptions();
    _navigationOption.initialLatitude = 37.7749;
    _navigationOption.initialLongitude = -122.4194;
    _navigationOption.mode = MapBoxNavigationMode.driving;
    MapBoxNavigation.instance.registerRouteEventListener(_onRouteEvent);
  }

    @override
  void initState() {
    initialize();
    super.initState();
  }

  @override
  void dispose() {
    _controller?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          SizedBox(
            height: MediaQuery.of(context).size.height * 1,
            child: Container(
              color: Colors.grey[100],
              child: MapBoxNavigationView(
                options: _navigationOption,
                onRouteEvent: _onRouteEvent,
                onCreated: (MapBoxNavigationViewController controller) async {
                  _controller = controller;
                  controller.initialize();
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

   Future<void> _onRouteEvent(e) async {

    _distanceRemaining = await MapBoxNavigation.instance.getDistanceRemaining();
    _durationRemaining = await MapBoxNavigation.instance.getDurationRemaining();

    switch (e.eventType) {
      case MapBoxEvent.progress_change:
        var progressEvent = e.data as RouteProgressEvent;
        _arrived = progressEvent.arrived!;
        if (progressEvent.currentStepInstruction != null) {
          _instruction = progressEvent.currentStepInstruction;
        }
        break;
      case MapBoxEvent.route_building:
      case MapBoxEvent.route_built:
        _routeBuilt = true;
        break;
      case MapBoxEvent.route_build_failed:
        _routeBuilt = false;
        break;
      case MapBoxEvent.navigation_running:
        _isNavigating = true;
        break;
      case MapBoxEvent.on_arrival:
        _arrived = true;
        if (!_isMultipleStop) {
          await Future.delayed(const Duration(seconds: 3));
          await _controller?.finishNavigation();
        } else {}
        break;
      case MapBoxEvent.navigation_finished:
      case MapBoxEvent.navigation_cancelled:
        _routeBuilt = false;
        _isNavigating = false;
        break;
      default:
        break;
    }
    //refresh UI
    setState(() {});
  }
}